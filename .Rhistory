itemFrequency(electronidex_transactions, type = "absolute")
itemFrequencyPlot(electronidex_transactions, type = "absolute", topN = 10, horiz = F)
image(electronidex_transactions)
itemFrequencyPlot(sample(electronidex_transactions, 50))
image(sample(electronidex_transactions, 50))
set.seed(123)
image(sample(electronidex_transactions, 50))
set.seed(4)
image(sample(electronidex_transactions, 50))
set.seed(9)
image(sample(electronidex_transactions, 50))
image(sample(electronidex_transactions, 100))
itemFrequencyPlot(sample(electronidex_transactions, 50))
set.seed(9)
image(sample(electronidex_transactions, 100))
set.seed(12)
image(sample(electronidex_transactions, 100))
set.seed(243)
image(sample(electronidex_transactions, 100))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.1, conf = 0.8))
inspect(RulesName)
inspect(sort(RulesName, by = "count"))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.05, conf = 0.8))
inspect(RulesName)
inspect(sort(RulesName, by = "count"))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.05, conf = 0.5))
inspect(RulesName)
inspect(sort(RulesName, by = "count"))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.05, conf = 0.1))
library(arules)
library(arulesViz)
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
inspect(electronidex_transactions)
length (electronidex_transactions)
size(electronidex_transactions)
LIST(electronidex_transactions)
itemLabels(electronidex_transactions)
itemFrequency(electronidex_transactions, type = "absolute")
itemFrequencyPlot(electronidex_transactions, type = "absolute", topN = 10, horiz = F)
image(electronidex_transactions)
set.seed(243)
image(sample(electronidex_transactions, 100))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.05, conf = 0.1))
inspect(RulesName)
inspect(sort(RulesName, by = "count"))
ItemRules <- subset(RulesName, items %in% "iMac")
is.redundant(RulesName)
plot(RulesName)
plot(RulesName, method="graph", control=list(type="items"))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.8))
inspect(RulesName)
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.5))
inspect(RulesName)
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.6))
inspect(RulesName)
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.5))
inspect(RulesName)
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.5, minlen = 2))
inspect(RulesName)
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.5, minlen = 2))
inspect(RulesName)
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.5, minlen = 2))
inspect(RulesName)
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.55, minlen = 2))
inspect(RulesName)
inspect(sort(RulesName, by = "count"))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.55, minlen = 1))
inspect(RulesName)
inspect(sort(RulesName, by = "count"))
ItemRules <- subset(RulesName, items %in% "iMac")
is.redundant(RulesName)
plot(RulesName)
plot(RulesName, method="graph", control=list(type="items"))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.55, minlen = 2))
inspect(RulesName)
summary(RulesName)
plot(RulesName)
inspect(sort(RulesName, by = "lift"))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.55, minlen = 2))
summary(RulesName)
inspect(RulesName)
inspect(sort(RulesName, by = "lift"))
ItemRules <- subset(RulesName, items %in% "iMac")
is.redundant(RulesName)
plot(RulesName)
plot(RulesName, method="graph", control=list(type="items"))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.5, minlen = 2))
summary(RulesName)
inspect(RulesName)
inspect(sort(RulesName, by = "lift"))
ItemRules <- subset(RulesName, items %in% "iMac")
is.redundant(RulesName)
plot(RulesName)
plot(RulesName, method="graph", control=list(type="items"))
plot(RulesName, method="graph", control=list(type="items"), interactive = T)
plot(RulesName, method="graph", control=list(type="items"), interactive = T)
plot(RulesName, method="graph", control=list(type="items"), engine = "interactive")
plot(RulesName, method="graph", control=list(type="items"), engine = "interactive")
plot(RulesName)
plot(RulesName, method="graph", control=list(type="items"), engine = "interactive")
plot(RulesName, method="graph", control=list(type="items"), engine = "interactive")
summary(RulesName)
inspect(RulesName)
inspect(sort(RulesName, by = "lift"))
ItemRules <- subset(RulesName, items %in% "iMac")
is.redundant(RulesName)
plot(RulesName)
plot(RulesName, method="graph", control=list(type="items"), engine = "interactive")
plot(RulesName, method="graph", control=list(type="items"))
plot(RulesName, method="graph", control=list(type="items"), engine = "interactive")
source('~/market basket analysis/Market Basket Analysis.R', echo=TRUE)
is.redundant(RulesName)
# hola hola!
# PLAN OF ATTACK STEP 2: INSTALL, UPLOAD AND GET TO KNOW YOUR DATA SET
library(arules)
library(arulesViz)
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
inspect(electronidex_transactions)
length (electronidex_transactions)
size(electronidex_transactions)
LIST(electronidex_transactions)
itemLabels(electronidex_transactions)
# PLAN OF ATTACK STEP 3: VISUALIZE YOUR DATA SET
itemFrequency(electronidex_transactions, type = "absolute")
itemFrequencyPlot(electronidex_transactions, type = "absolute", topN = 10, horiz = F)
image(electronidex_transactions)
set.seed(243)
image(sample(electronidex_transactions, 100))
# PLAN OF ATTACK STEP 4: APPLY THE APRIORI ALGORITHM
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.5, minlen = 2))
# PLAN OF ATTACK STEP 5: EVALUATE YOUR MODEL
summary(RulesName)
inspect(RulesName)
# PLAN OF ATTACK STEP 6: IMPROVE YOUR MODEL
inspect(sort(RulesName, by = "lift"))
# ItemRules <- subset(RulesName, items %in% "iMac")
is.redundant(RulesName)
# PLAN OF ATTACK STEP 7: VISUALIZE YOUR RESULTS
plot(RulesName)
plot(RulesName, method="graph", control=list(type="items"), engine = "interactive")
plot(RulesName, engine = "interactive")
plot(RulesName, engine = "interactive")
plot(RulesName, engine = "interactive")
plot(RulesName, engine = "interactive")
plot(RulesName, method="graph", control=list(type="items"))
plot(RulesName, method="graph", control=list(type="items"), engine = "interactive")
plot(RulesName, method="graph", control=list(type="items"), engine = "interactive")
plot(RulesName, method="graph", control=list(type="items"), engine = "interactive")
plot(RulesName, method="graph", control=list(type="items"), engine = "interactive")
inspect(sort(RulesName, by = "lift"))
inspect(sort(RulesName, by = "support"))
library(arules)
library(arulesViz)
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
inspect(electronidex_transactions)
length (electronidex_transactions)
size(electronidex_transactions)
LIST(electronidex_transactions)
itemLabels(electronidex_transactions)
itemFrequency(electronidex_transactions, type = "absolute")
itemFrequencyPlot(electronidex_transactions, type = "absolute", topN = 10, horiz = F)
image(electronidex_transactions)
set.seed(243)
image(sample(electronidex_transactions, 100))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.5, minlen = 2))
summary(RulesName)
inspect(RulesName)
inspect(sort(RulesName, by = "support"))
is.redundant(RulesName)
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.5, minlen = ))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.5, minlen = 0))
summary(RulesName)
inspect(RulesName)
inspect(sort(RulesName, by = "support"))
RulesName<- apriori (electronidex_transactions, parameter = list(supp = 0.01, conf = 0.5, minlen = 1))
summary(RulesName)
inspect(RulesName)
inspect(sort(RulesName, by = "support"))
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
inspect(electronidex_transactions)
length (electronidex_transactions)
size(electronidex_transactions)
sort(size(electronidex_transactions))
sort(size(electronidex_transactions), decreasing = T)
LIST(electronidex_transactions)
sort(size(electronidex_transactions), decreasing = T)
hist(sort(size(electronidex_transactions), decreasing = T))
library(ggplot2)
ggplot(sort(size(electronidex_transactions), decreasing = T))
ggplot(data = sort(size(electronidex_transactions), decreasing = T))) + geom_histogram()
ggplot(data = sort(size(electronidex_transactions), decreasing = T)) + geom_histogram()
itemsbought <- sort(size(electronidex_transactions), decreasing = T)
ggplot(itemsbought) + geom_histogram()
ggplot(itemsbought) + geom_histogram()
hist(itemsbought)
hist(itemsbought, breaks = 30)
hist(itemsbought, breaks = 60)
itemLabels(electronidex_transactions)
size(electronidex_transactions)
length (electronidex_transactions)
inspect(electronidex_transactions)
size(electronidex_transactions)
itemsbought <- sort(size(electronidex_transactions), decreasing = T)
hist(itemsbought, breaks = 60)
LIST(electronidex_transactions)
View(electronidex_transactions)
electronidex_transactions[which(size > 5)]
B2B <- subset(electronidex_transactions, subset = (size < 5))
length (electronidex_transactions)
B2B <- electronidex_transactions[sort(size(electronidex_transactions), decreasing = T)]
B2B
View(B2B)
length (B2B)
B2B <- electronidex_transactions[1:4917, sort(size(electronidex_transactions), decreasing = T)]
B2B
B2B <- electronidex_transactions(ncol = 5)
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
B2B <- electronidex_transactions(ncol = 5)
B2B <- matrix(electronidex_transactions, ncol = 5)
B2B
B2B <- matrix(electronidex_transactions, ncol = 5, byrow = T)
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
inspect(electronidex_transactions)
itemLabels(electronidex_transactions)
LIST(electronidex_transactions)
length (electronidex_transactions)
size(electronidex_transactions)
itemsbought <- sort(size(electronidex_transactions), decreasing = T)
hist(itemsbought, breaks = 60)
View(B2B)
library(arules)
library(arulesViz)
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
inspect(electronidex_transactions)
itemLabels(electronidex_transactions)
LIST(electronidex_transactions)
length (electronidex_transactions)
size(electronidex_transactions)
itemsbought <- sort(size(electronidex_transactions), decreasing = T)
hist(itemsbought, breaks = 60)
library(ggplot2)
ggplot(itemsbought) + geom_col()
itemsbought <- as.data.frame(sort(size(electronidex_transactions), decreasing = T))
hist(itemsbought, breaks = 60)
ggplot(itemsbought) + geom_col()
View(itemsbought)
ggplot(itemsbought, aes(x = (sort(size(electronidex_transactions), decreasing = T)))) + geom_col()
hist(itemsbought, breaks = 60)
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
inspect(electronidex_transactions)
itemLabels(electronidex_transactions)
LIST(electronidex_transactions)
length (electronidex_transactions)
size(electronidex_transactions)
itemsbought <- as.data.frame(sort(size(electronidex_transactions), decreasing = T))
hist(itemsbought, breaks = 60)
itemsbought <- sort(size(electronidex_transactions), decreasing = T)
hist(itemsbought, breaks = 60)
hist(itemsbought, breaks = 10)
hist(itemsbought, breaks = 2)
hist(itemsbought, breaks = 5)
hist(itemsbought, breaks = 10)
hist(itemsbought, breaks = 30)
library(readr)
electronidex_transactions <-
read("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
electronidex_transactions <-
read_csv("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
electronidex_transactions <-
read_csv("C:/Users/user/Downloads/ElectronidexTransactions2017.csv")
View(electronidex_transactions)
library(readr)
ElectronidexTransactions2017 <- read_csv("C:/Users/user/Downloads/ElectronidexTransactions2017.csv",
col_names = FALSE)
View(ElectronidexTransactions2017)
ElectronidexTransactions2017 <- read_csv("C:/Users/user/Downloads/ElectronidexTransactions2017.csv",
col_names = FALSE)
View(ElectronidexTransactions2017)
electronidex_transactions <- read_csv("C:/Users/user/Downloads/ElectronidexTransactions2017.csv",
col_names = FALSE)
View(electronidex_transactions)
sort(size(electronidex_transactions), decreasing = T)
sort(electronidex_transactions, decreasing = T)
sort(electronidex_transactions, decreasing = T, na.last= T)
summary(RulesName)
rlang::last_error()
electronidex_transactions[order(rowSums(is.na(dat))), ]
electronidex_transactions[order(rowSums(is.na(electronidex_transactions))), ]
sorted <- electronidex_transactions[order(rowSums(is.na(electronidex_transactions))), ]
View(sorted)
B2B <- sorted [1:4918]
B2B <- sorted [,1:4918]
B2B <- sorted [1:4918,]
View(B2B)
rowSums(is.na(sorted))
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
electronidex_transactions[order(size(electronidex_transactions))]
sorted <- electronidex_transactions[order(size(electronidex_transactions))]
B2B <- sorted[1:1000]
size(electronidex_transactions)
itemsbought <- sort(size(electronidex_transactions), decreasing = T)
itemsbought
table(itemsbought)
size(itemsbought[0-4])
size(itemsbought[0:4])
length (electronidex_transactions)
size(electronidex_transactions)
itemsbought <- sort(size(electronidex_transactions), decreasing = T)
table(itemsbought)
electronidex_transactions[order(size(electronidex_transactions))]
sorted <- electronidex_transactions[order(size(electronidex_transactions))]
B2B <- sorted[1:1000]
matrixe <- (electronidex_transactions, "matrix")
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
matrixe <- (electronidex_transactions, "matrix")
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
matrixe <- (electronidex_transactions, "matrix")
matrixelect <- (electronidex_transactions, "matrix")
tr <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
x <- (tr, "matrix")
x <- as(tr, "matrix")
View(x)
tr@itemInfo
productkey <- tr@itemInfo$"new level" <- c("screen")
productkey
productkey <- tr@itemInfo$"new_level" <- c("screen")
View(ElectronidexTransactions2017)
View(electronidex_transactions)
image(sample(electronidex_transactions, 100))
itemFrequencyPlot(electronidex_transactions, type = "absolute", topN = 10, horiz = F)
hist(itemsbought, breaks = 30)
electronidex_transactions <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
size(electronidex_transactions)
itemsbought <- sort(size(electronidex_transactions), decreasing = T)
table(itemsbought)
hist(itemsbought, breaks = 30)
itemsbought <- sort(size(electronidex_transactions), decreasing = T)
table(itemsbought)
str(table(itemsbought))
attributes(table(itemsbought))
View(table(itemsbought))
tr <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
x <- as(tr, "matrix")
x
View(x)
tr <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
tr <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
x <- as(tr, "matrix")
x
productkey <- tr@itemInfo$"new_level" <- c("screen")
productkey
tr@itemInfo
productkey <- read.csv("C:/Users/user/Documents/producttypekey.csv")
View(productkey)
library(readr)
producttypekey <- read_delim("~/producttypekey.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(producttypekey)
tr <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
product_key <- read_delim("~/producttypekey.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(product_key)
View(product_key)
View(productkey)
View(product_key)
product_key <- read_delim("~/producttypekey.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(product_key)
tr <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
tr <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
product_key <- read_delim("~/producttypekey.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(product_key)
aggregate(x)
tr <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
product_key <- read_delim("~/producttypekey.csv",
";", escape_double = FALSE, trim_ws = TRUE)
x <- as(tr, "matrix")
x
aggregate(x)
aggregate(x)
aggregate(x, FUN = sum)
aggregate(x, FUN = "sum")
aggregate(x, FUN = sum)
aggregate(tr, FUN = sum)
merge(x, product_key)
hola <- merge(x, product_key)
hola
View(hola)
View(product_key)
tr
tr <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
hola <- read.csv("C:/Users/user/Downloads/ElectronidexTransactions2017.csv")
View(hola)
library(readr)
ElectronidexTransactions2017 <- read_csv("C:/Users/user/Downloads/ElectronidexTransactions2017.csv",
col_names = FALSE)
View(ElectronidexTransactions2017)
tr <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
View(tr)
x <- as(tr, "matrix")
View(x)
tr@itemInfo
replace(tr[1,], tr@itemInfo, product_key[,2])
replace(x[1,], tr@itemInfo, product_key[,2])
replace(x[], tr@itemInfo, product_key[,2])
replace(x[1,], tr@itemInfo, product_key[,2])
x[1,]
x[0,]
replace(x[0,], tr@itemInfo, product_key[,2])
replace(x[0,], product_key, product_key[,2])
x[0,]
product_key[,2]
View(product_key)
merge(x, product_key, by.y = "product name", all.x = TRUE)
match(x[0,], product_key[,2])
a <- match(x[0,], product_key[,2])
a
x[0,]
product_key[,2]
x[0,]
product_key[,2]
match(x[0,], product_key[,1])
product_key[,1]
x[0,]
x[0,]
product_key[,1]
x[0,]
tr[0,]
product_key[,1]
match(tr[0,], product_key[,1])
tr@itemInfo
product_key[,1]
match(tr@itemInfo, product_key[,1])
hola <- match(tr@itemInfo, product_key[,1])
melt(x)
library(reshape2)
melt(x)
hola <- melt(x)
View(hola)
merge(hola, product_key, by.x = "Var2" ,by.y = "product name", all.x = TRUE)
hola1 <- merge(hola, product_key, by.x = "Var2" ,by.y = "product name", all.x = TRUE)
View(hola1)
hola1(,c(2,4,3))
hola <- melt(x)
hola1 <- merge(hola, product_key, by.x = "Var2" ,by.y = "product name", all.x = TRUE)
hola1(,c(2,4,3))
hola1 <- merge(hola, product_key, by.x = "Var2" ,by.y = "product name", all.x = TRUE)
View(hola1)
new_dataset <- hola1[,3:4]
View(new_dataset)
new_dataset <- hola1[,4:3]
View(hola1)
View(new_dataset)
View(x)
hola1 <- merge(hola, product_key, by.x = "Var2" ,by.y = "product name", all.x = TRUE)
View(hola1)
View(x)
View(x)
x <- as(tr, "matrix")
View(x)
x[which(x)]
x[which]
x[which()]
x[which(x)]
hola <- melt(x)
hola1 <- merge(hola, product_key, by.x = "Var2" ,by.y = "product name", all.x = TRUE)
View(hola1)
View(hola)
View(hola1)
t(x)
a <- t(x)
View(a)
View(a)
hola1 <- merge(a, product_key, by.y = "product name", all.x = TRUE)
hola1 <- merge(a, product_key, by.x = "", by.y = "product name", all.x = TRUE)
hola1 <- merge(a, product_key, by.x = "", by.y = "product name", all.x = TRUE)
tr <-
read.transactions("C:/Users/user/Downloads/ElectronidexTransactions2017.csv", sep = ",")
x <- as(tr, "matrix")
a <- t(x)
product_key <- read_delim("~/producttypekey.csv",
";", escape_double = FALSE, trim_ws = TRUE)
hola1 <- merge(a, product_key, by.x = "", by.y = "product name", all.x = TRUE)
View(x)
View(a)
View(x)
colnames(a)
colnames(a)
x <- as(tr, "matrix")
